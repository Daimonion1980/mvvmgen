// ***********************************************************************
// ⚡ MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen
// Copyright © by Thomas Claudius Huber
// Licensed under the MIT license => See the LICENSE file in project root
// ***********************************************************************

using Xunit;

namespace MvvmGen.SourceGenerators
{
    public class CommandAttributeTests : ViewModelGeneratorTestsBase
    {
        [Fact]
        public void GenerateCommandProperty()
        {
            ShouldGenerateExpectedCode(
      @"using MvvmGen;

namespace MyCode
{   
  [ViewModel]
  public partial class EmployeeViewModel
  {
    [Command]public void SaveAll() { }
  }
}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : ViewModelBase
    {{
        public EmployeeViewModel()
        {{
            this.InitializeCommands();
            this.OnInitialize();
        }}

        partial void OnInitialize();

        private void InitializeCommands()
        {{
            SaveAllCommand = new(SaveAll);
        }}

        public DelegateCommand SaveAllCommand {{ get; private set; }}
    }}
}}
");
        }

        [InlineData("CanExecuteMethod=\"CanSaveAll\"")]
        [InlineData("CanExecuteMethod=nameof(CanSaveAll)")]
        [InlineData("nameof(CanSaveAll)")]
        [InlineData("\"CanSaveAll\"")]
        [Theory]
        public void GenerateCommandPropertyWithCanExecuteMethod(string attributeArgument)
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmGen;

namespace MyCode
{{   
    [ViewModel]
    public partial class EmployeeViewModel
    {{
        [Command({attributeArgument})]
        public void SaveAll() {{ }}

        public bool CanSaveAll() => true;
    }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : ViewModelBase
    {{
        public EmployeeViewModel()
        {{
            this.InitializeCommands();
            this.OnInitialize();
        }}

        partial void OnInitialize();

        private void InitializeCommands()
        {{
            SaveAllCommand = new(SaveAll, CanSaveAll);
        }}

        public DelegateCommand SaveAllCommand {{ get; private set; }}
    }}
}}
");
        }

        [InlineData("CanExecuteMethod=nameof(CanSaveAll)")]
        [InlineData("CanExecuteMethod=\"CanSaveAll\"")]
        [InlineData("nameof(CanSaveAll)")]
        [InlineData("\"CanSaveAll\"")]
        [Theory]
        public void GenerateCommandPropertyWithCanExecuteMethodAndCommandNameUsingNamedArgument(string canExecuteParameter)
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmGen;

namespace MyCode
{{   
  [ViewModel]
  public partial class EmployeeViewModel
  {{
    [Command({canExecuteParameter}, CommandName=""SuperCommand"")]
    public void SaveAll() {{ }}

    public bool CanSaveAll() => true;
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : ViewModelBase
    {{
        public EmployeeViewModel()
        {{
            this.InitializeCommands();
            this.OnInitialize();
        }}

        partial void OnInitialize();

        private void InitializeCommands()
        {{
            SuperCommand = new(SaveAll, CanSaveAll);
        }}

        public DelegateCommand SuperCommand {{ get; private set; }}
    }}
}}
");
        }
    }
}
