// ***********************************************************************
// ⚡ MvvmGen => https://github.com/thomasclaudiushuber/mvvmgen
// Copyright © by Thomas Claudius Huber
// Licensed under the MIT license => See the LICENSE file in project root
// ***********************************************************************

using Xunit;

namespace MvvmGen.SourceGenerators
{
    public partial class PropertyAttributeTests : ViewModelGeneratorTestsBase
    {
        [InlineData("firstName")]
        [InlineData("_firstName")]
        [InlineData("m_firstName")]
        [Theory]
        public void GenerateProperty(string fieldName)
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmGen;

namespace MyCode
{{   
  [ViewModel]
  public partial class EmployeeViewModel
  {{
    [Property] private string {fieldName};
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : ViewModelBase
    {{
        protected override void OnInitialize()
        {{
        }}

        public string FirstName
        {{
            get => {fieldName};
            set
            {{
                if ({fieldName} != value)
                {{
                    {fieldName} = value;
                    OnPropertyChanged(""FirstName"");
                }}
            }}
        }}
    }}
}}
");
        }

        [InlineData("PropertyName=\"AmazingFirstName\"", "AmazingFirstName")]
        [InlineData("\"IncredibleFirstName\"", "IncredibleFirstName")]
        [Theory]
        public void GeneratePropertyWithName(string attributeArgument, string expectedPropertyName)
        {
            ShouldGenerateExpectedCode(
      $@"using MvvmGen;

namespace MyCode
{{   
  [ViewModel]
  public partial class EmployeeViewModel
  {{
    [Property({attributeArgument})] private string _firstName;
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : ViewModelBase
    {{
        protected override void OnInitialize()
        {{
        }}

        public string {expectedPropertyName}
        {{
            get => _firstName;
            set
            {{
                if (_firstName != value)
                {{
                    _firstName = value;
                    OnPropertyChanged(""{expectedPropertyName}"");
                }}
            }}
        }}
    }}
}}
");
        }

        [InlineData("int Id, string FirstName", "value.Id, value.FirstName")]
        [InlineData("int Id",  "value.Id")]
        [InlineData("Employee emp", "value")]
        [InlineData("", "")]
        [Theory]
        public void GenerateEventAggregatorPropertyAndPublishEventInProperty(string eventConstructorParameters,  string attributeConstructorParameters)
        {
            string attributeNamedArgument = ", PublishEventConstructorArgs=";
            if(!string.IsNullOrEmpty(attributeConstructorParameters))
            { 
                attributeNamedArgument+= $"\"{ attributeConstructorParameters}\"";
            }
            else
            {
                attributeNamedArgument = "";
            }

            ShouldGenerateExpectedCode(
      $@"using MvvmGen;

namespace MyCode
{{   
  public record SelectedEmployeeChangedEvent({eventConstructorParameters})

  class Employee
  {{
    public int Id {{ get; set; }}
    public string FirstName {{ get; set; }}
  }}

  [ViewModel]
  public partial class EmployeeViewModel
  {{
    [Property(PublishEventOnChange=typeof(SelectedEmployeeChangedEvent{attributeNamedArgument})] private Employee _selectedItem;
  }}
}}",
      $@"{AutoGeneratedComment}
{AutoGeneratedUsings}

namespace MyCode
{{
    partial class EmployeeViewModel : ViewModelBase
    {{
        protected override void OnInitialize()
        {{
        }}

        protected IEventAggregator EventAggregator {{ get; set; }}

        public MyCode.Employee SelectedItem
        {{
            get => _selectedItem;
            set
            {{
                if (_selectedItem != value)
                {{
                    _selectedItem = value;
                    OnPropertyChanged(""SelectedItem"");
                    EventAggregator.Publish(new MyCode.SelectedEmployeeChangedEvent({attributeConstructorParameters}));
                }}
            }}
        }}
    }}
}}
");
        }
    }
}
